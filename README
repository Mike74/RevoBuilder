RevoBuilder 

This package is something to help new users get started with RevoBoot. It started life as a script by me to help generate the settings.h config file. Then STLVNUB wrapped my simple script in to a much larger, full featured package giving a wider array of options. 

I have since left STLVNUB to carry on with his full featured version and I have gone back to managing a simple verison which you see here. The menu layout has been re-worked as has the way some of the code works to generate it, along with many other changes to allow me to gain a better understanding of the process and to enable me to split the main script in to sub-scripts to try to help keep it more manageable. 


RevoBoot Bootloader Overview

What is RevoBoot? 
RevoBoot is a GUI less stage 2 bootloader based on Master Chief's "RevoBoot" - RevoBoot was a special kind of branch of Chameleon based on Apple's Boot 132.
That being said. RevoBoot is the successor of RevoBoot and is now being ripped up, dissected and re-thought by RevoGirl. She has continued to fine tune every aspect of what's required to boot OS X in the most direct way, with the aim of keeping the bootloader as small, quick and tidy as possible.

Overview of using RevoBoot
RevoBoot is not a one size fits all bootloader, as in it needs to be tailored to suit each system it's going to be used on. That happens at the source code level and therefore needs to be compiled specifically by you for your hardware.

Source Code Orangisation
RevoGirl has engineered the code to have a config folder, and in this config folder are the files which need to be changed. This keeps thing simple for us and less daunting for a new user as we only have to concentrate on four files.

Config Files
Looking at RevoBoots' source code, drill down to /i386/config and you will find three folders, ACPI, EFI and SMBIOS, each containing a file named data.h. Static data for your system can be added to these data.h files in a structured way to enable you to benefit from a faster boot. For example, your DSDT.aml can be added to /i386/config/ACPI/data.h which will then be compiled inside RevoBoot. The result being the bootloader no longer needs to search for the file on disk to load at boot time. 

Though note: These files don't have to be populated straight away as RevoBoot can still load your files from the /Extra folder on your boot volume.

Along with the three customisable data.h files, there is also a lose data.h file and settings.h file in /i386/config. The data.h file doesn't need to be touched and should remain where it is as it's part of the source code. Though the settings.h file is your master controller file, containing all the switches that can be turned on or off to direct the compiler code to include for your personal boot file.


RevStart Overview

Back to Project RevoBoot
Configuring the config files required by RevoBoot can be a bit bewildering at first, so that's why this package exists. It helps fill in the config files with data relevant to your system. Note the word, 'helps' here as this might not set every option needed for you to have a successful boot, in which case you will have to look the config files yourself and intelligently work out what needs to be enabled etc. Or better still, look at them anyway as it's good to learn.

Package setup

In the RevoBuilder folder you will find this ReadMe a folder named Revstart and a link named DoubleClickMe which points to the main Revstart script in the /RevStart/Scripts folder. Note: A folder will appear in the RevoBuilder folder named RevoBoot_SourceCode once the RevStart script is furst run.

In the RevStart folder you will see two folders: Resources and Scripts.
Note: A folder named Build appears after the script has first been run.

	*	The Build folder is used by the RevStart script to hold most of the files it creates.
	*	The Resources folder doesn't need to be touched and holds essential files needed by RevStart.
	*	The Scripts folder houses all the scripts used in the RevStart process.

There is also an alias to the main RevStart script which is all that's needed to be run.

How to Use
Double click the DoubleClickMe file to run the RevStart script and you will be asked for your authentication to allow the script to proceed and present you with the RevStart menu. Hopefully it's not too confusing to look at, but the idea is all words coloured blue are options which you can choose from and they are now numbered to help choosing each option easy. Selecting and option from the menu is as easy as typing the number and pressing return.

If it's the first time you've run the script, then you see a short welcome message.

Main Menu
The menu that RevStart shows you is dynamic and will change depending on the things it knows. For instance, if you don't have the Apple developer tools installed then the options to compile RevoBoot won't be available. Also, if the script can't find the RevoBoot source code folder then you will only see four menu options: one to download the latest source code, another to type the name of an existing source code folder, another to refresh the menu and a fourth to exit the script.

You can select option (1) Download to grab the lastest version of the RevoBoot source code from the git repository. NOTE: you will need to have git set up on your machine before you can do this. See http://help.github.com/mac-set-up-git for more info.

Once you have a git setup, the source can be downloaded and will be added to the RevoBoot_SourceCode folder and the source folder will be renamed with using the version/revision number used in the source code. If you already have this folder in the RevoBoot_SourceCode folder then the existing source code folder will be renamed by having the time appended to the end so as not to overwrite it.

Once the script has the RevoBoot source folder and has identified your have the Apple developer tools installed, then more options will be available. These are separated in to two sections, Manual procedures and Auto procedures.

Manual Procedures
These have been setup to follow the approach that I would do when wanting to use RevoBoot. The steps are broken down in to enabling a couple of settings for the config files, generating the config files, editing the settings.h file to suit your needs and finally compiling the source code.

The steps described above are show in the menu as:

	*	Toggle DebugMode
		With this enabled, all debug options in RevoBoot's settings.h will be set to 1.
		This is just a quick way of doing so, rather than manually doing it a bit later.
		However, RevoGirl doesn't recommend they're all used at once.

	*	Toggle Target OS:	
		Enables some directives in settings.h to suit booting either 10.6 or 10.7.
		Snow Leopard, for now, will be the main target to choose from, though booting Lion option is being worked on.
		To test booting Lion, enable this to Lion.

	*	User Config data built:
		The RevoBoot source code needs config files specific to your machine. 
		On the first run, this will read *** NOT Generated ***as it doesn't yet exist.
		Selecting this option will send RevStart off to gather the necessary information.

		The information gathered will be your ACPI tables, EFI properties and SMBIOS table.
		These are converted in to data structures that RevoBoot uses and written to RevoBoot's source config folder
		Once these have been saved, the settings.h file is created based on the data collected.

	*	Edit settings.h
		This option opens the settings.h file for editing in the default app for that filetype.
		The automatically generated settings.h file will not be perfect and will most probably need tweaking.
		As to know what to change? well that's for finding out for now, by reading the topic at InsanelyMac.

	*	TrashConfig
		Once the config files have been created, this option appears and allows you to delete them.

	*	Compile
		Once the config files have been created, and you're happy with the Settings.h file then RevoBoot is ready to compile.

	*	Clean
		If RevoBoot has already been compiled, then the option for removing the compelled files appears.


That's as far as I've got for now. More will be added in the future.

Regards
Blackosx

